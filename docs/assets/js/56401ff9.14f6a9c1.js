"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3188],{18873:e=>{e.exports=JSON.parse('{"permalink":"/docs/blog/2020/09/09/how-to-setup-asp-net-core-health-check-ui","editUrl":"https://github.com/MarkZither/mywyamblog/tree/main/docs/blog/2020-09-09-how-to-setup-asp-net-core-health-check-ui.md","source":"@site/blog/2020-09-09-how-to-setup-asp-net-core-health-check-ui.md","title":"How to Setup ASP.NET Core Health Check UI","description":"In Part one we setup the health check endpoints, now to add a frontend.","date":"2020-09-09T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET Core","permalink":"/docs/blog/tags/aspnet-core","description":"Microsoft ASP.NET Core framework"},{"inline":false,"label":"Health Checks","permalink":"/docs/blog/tags/health-checks","description":"Application health monitoring"}],"readingTime":1.87,"hasTruncateMarker":false,"authors":[{"name":"Mark Burton","title":"Software Engineer & Technical Writer","url":"https://github.com/MarkZither","imageURL":"https://github.com/MarkZither.png","key":"mark-burton","page":null}],"frontMatter":{"title":"How to Setup ASP.NET Core Health Check UI","authors":["mark-burton"],"tags":["ASP.NET Core","Health Checks"],"date":"2020-09-09"},"unlisted":false,"prevItem":{"title":"Getting the most out of Swagger in your ASP.NET Core api","permalink":"/docs/blog/2020/09/09/getting-the-most-out-of-swagger-in-your-asp-net-core-api"},"nextItem":{"title":"Secure ASP.NET Core Health Checks to a specific port","permalink":"/docs/blog/2020/09/08/secure-asp-net-core-health-checks-to-a-specific-port"}}')},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var o=n(96540);const s={},a=o.createContext(s);function r(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:t},e.children)}},36401:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/healthchecksui-94af31c8318f7d45315679e579de276e.png"},42065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var o=n(18873),s=n(74848),a=n(28453);const r={title:"How to Setup ASP.NET Core Health Check UI",authors:["mark-burton"],tags:["ASP.NET Core","Health Checks"],date:"2020-09-09"},i=void 0,c={authorsImageUrls:[void 0]},h=[];function l(e){const t={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"2020-09-08-secure-asp-net-core-health-checks-to-a-specific-port",children:"Part one"})," we setup the health check endpoints, now to add a frontend."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"2020-09-08-secure-asp-net-core-health-checks-to-a-specific-port",children:"Health Checks UI"})," is best hosted in its own service as it can consolidate health checks for a number of services."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Swagger CORS error",src:n(36401).A+"",width:"1366",height:"728"})}),"\n",(0,s.jsxs)(t.p,{children:["Adding the HealthChecks UI to the service involves adding 2 nuget packages, the main ",(0,s.jsx)(t.code,{children:"AspNetCore.HealthChecks.UI"})," package and a storage provider, initially I have used the InMemory storage provider as I do not have the need to see historical data. There are also providers various databases including SqlServer and SQLite which can be used to persist the data."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<PackageReference Include="AspNetCore.HealthChecks.UI" Version="$(AspNetCoreHealthChecksUIVersion)" />\n<PackageReference Include="AspNetCore.HealthChecks.UI.InMemory.Storage" Version="$(AspNetCoreHealthChecksUIVersion)" />\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As the HealthChecks nuget packages will be used across all projects I have set the version numbers centrally in ",(0,s.jsx)(t.a,{href:"https://github.com/MarkZither/SwaggerAndHealthCheckBlog/blob/master/Directory.Build.props",children:"Directory.Build.props"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<AspNetCoreHealthChecksUIVersion>3.1.1</AspNetCoreHealthChecksUIVersion>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The HealthChecks UI can now be added to ",(0,s.jsx)(t.code,{children:"ConfigureServices"})," and ",(0,s.jsx)(t.code,{children:"Configure"})," in ",(0,s.jsx)(t.a,{href:"https://github.com/MarkZither/SwaggerAndHealthCheckBlog/blob/master/src/MonitoringService/Startup.cs",children:"Startup.cs"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["As I want to limit the access to the UI in the same way as I did for the HealthCheck endpoints I have the service listening on multiple ports and use ",(0,s.jsx)(t.code,{children:"RequireHost"})," when configuring the endpoints to ensure the UI is only accessible internally."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'public void ConfigureServices(IServiceCollection services)\n{\n  services\n    .AddHealthChecksUI()\n    .AddInMemoryStorage();\n  services.AddControllers();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n  app.UseHealthChecksUI();\n  app.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n    endpoints.MapHealthChecksUI(config => {\n      config.UIPath = "/hc-ui";\n    }).RequireHost($"*:{Configuration["ManagementPort"]}");\n  });\n}\n```  Finally we need to tell the UI where to read the HealthChecks from, this can either be done in a configuration file  ```json\n...\n"https_port": 1131,\n"Urls": "http://localhost:1130;https://localhost:1131;https://localhost:1132",\n"ManagementPort": "1132",\n"AllowedHosts": "*",\n"HealthChecks-UI": {\n  "HealthChecks": [\n    {\n      "Name": "LoginService Check",\n      "Uri": "https://localhost:1116/hc"\n    },\n    {\n      "Name": "ResourceService Check",\n      "Uri": "https://localhost:5002/hc"\n    },\n    {\n      "Name": "NotificationService Check",\n      "Uri": "https://localhost:1179/hc"\n    }\n  ]\n}\n...\n```  or in code by adding settings to the `AddHealthChecksUI` method.  ```csharp\nservices.AddHealthChecksUI(setupSettings: settings => {\n  settings\n    .DisableDatabaseMigrations()\n    .AddHealthCheckEndpoint(name: healthCheckName, uri: healthCheckUri)\n    .AddWebhookNotification(name: webhookName, uri: webhookUri, payload: webhookPayload,\n      restorePayload: webhookRestorePayload)\n    .SetEvaluationTimeInSeconds(evaluationTimeInSeconds)\n    .SetMinimumSecondsBetweenFailureNotifications(minimumSeconds);\n}).AddInMemoryStorage();\n```  You can get the full working demo from [my GitHub repo](https:/github.comMarkZitherSwaggerAndHealthCheckBlog).\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);