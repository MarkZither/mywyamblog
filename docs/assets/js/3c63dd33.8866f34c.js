"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4094],{28303:e=>{e.exports=JSON.parse('{"permalink":"/docs/blog/2024/01/10/creating-a-chatbot-with-llm-rag","editUrl":"https://github.com/MarkZither/mywyamblog/tree/main/docs/blog/2024-01-10-creating-a-chatbot-with-llm-rag.md","source":"@site/blog/2024-01-10-creating-a-chatbot-with-llm-rag.md","title":"Untitled","description":"I wanted to understand more about how ChatGPT and Co-Pilots like those from GitHub and Pieces work and how I could do something similar including private content, whilst reading around the topic I read the article Demystifying Retrieval Augmented Generation with .NET and thought it described what I wanted to achieve so decided to follow along.  The first challenge I encountered was that Azure OpenAI Service is only available for \\"eligible customers and partners\\" which, for my personal projects, I do not qualify. That is not a problem though as Stephan explains in the post it is trivial to switch to OpenAI which offers a free quota of $5 per month.  Next issue was that the code examples did not compile, this seems to be because the Semantic Kernel library has moved on from version 0.24 to 1.0.1 since the post was written. Some of the the changes are covered in the post [Saying hello to Microsoft Semantic Kernel V1","date":"2024-01-10T00:00:00.000Z","tags":[],"readingTime":2.21,"hasTruncateMarker":false,"authors":[{"name":"Mark Burton","title":"Software Engineer & Technical Writer","url":"https://github.com/MarkZither","imageURL":"https://github.com/MarkZither.png","key":"mark-burton","page":null}],"frontMatter":{"title":"Untitled","authors":["mark-burton"],"date":"2024-01-10"},"unlisted":false,"prevItem":{"title":"Untitled","permalink":"/docs/blog/2024/03/10/cracking-aspnet-identity-password-hashes"},"nextItem":{"title":"Untitled","permalink":"/docs/blog/2023/12/22/hands-on-with-kiota"}}')},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>r});var n=o(96540);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}},38492:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>h});var n=o(28303),i=o(74848),a=o(28453);const s={title:"Untitled",authors:["mark-burton"],date:"2024-01-10"},r=void 0,l={authorsImageUrls:[void 0]},h=[];function c(e){const t={a:"a",code:"code",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(t.p,{children:["I wanted to understand more about how ChatGPT and Co-Pilots like those from ",(0,i.jsx)(t.a,{href:"https:/github.comfeaturescopilot",children:"GitHub"})," and ",(0,i.jsx)(t.a,{href:"https:/pieces.app",children:"Pieces"})," work and how I could do something similar including private content, whilst reading around the topic I read the article ",(0,i.jsx)(t.a,{href:"https:/devblogs.microsoft.comdotnetdemystifying-retrieval-augmented-generation-with-dotnet",children:"Demystifying Retrieval Augmented Generation with .NET"})," and thought it described what I wanted to achieve so decided to follow along.  The first challenge I encountered was that ",(0,i.jsx)(t.a,{href:"https:/azure.microsoft.comen-usproductsai-servicesopenai-service",children:"Azure OpenAI Service"}),' is only available for "eligible customers and partners" which, for my personal projects, I do not qualify. That is not a problem though as Stephan explains in the post it is trivial to switch to OpenAI which offers a free quota of $5 per month.  Next issue was that the code examples did not compile, this seems to be because the ',(0,i.jsx)(t.a,{href:"https:/www.nuget.orgpackagesMicrosoft.SemanticKernel#versions-body-tab",children:"Semantic Kernel library"})," has moved on from version 0.24 to 1.0.1 since the post was written. Some of the the changes are covered in the post ",(0,i.jsx)(t.a,{href:"https:/medium.com@jamesanthonystalleymooressaying-hello-to-microsoft-semantic-kernel-v1-02ba0b754d9f",children:"Saying hello to Microsoft Semantic Kernel V1\n(and upgrading from preview)"}),".  ### Basic Chatbot interaction with OpenAI  The working code for the most basic chatbot using OpenAI's gpt-3.5-turbo model is below.  ",(0,i.jsx)(t.code,{children:'csharp using Microsoft.SemanticKernel;  internal class Program \\\\\\{  private static async Task Main(string[] args) \\{  string oaiApiKey = Environment.GetEnvironmentVariable("OPENAI_API_KEY")!;  string oaiModel = "gpt-3.5-turbo-1106";  Initialize the kernel  IKernelBuilder builder = Kernel.CreateBuilder();  builder.Services.AddOpenAIChatCompletion(oaiModel, oaiApiKey);  var kernel = builder.Build();  // Q&A loop  while (true) {  Console.Write("Question: ");  Console.WriteLine((await kernel.InvokePromptAsync(Console.ReadLine()!)).GetValue&lt;string>());  Console.WriteLine();  \\\\}  } }'}),"  ### Storing Messages In The Chat History  Adding chat history means the chatbot can keep track of the conversation and be given a bit of personality.  ",(0,i.jsx)(t.code,{children:'csharp private static async Task Main(string[] args) \\\\\\{  string aoaiApiKey = Environment.GetEnvironmentVariable("AZURE_OPENAI_API_KEY")!;  string oaiModel = "gpt-3.5-turbo-1106";  Initialize the kernel  IKernelBuilder builder = Kernel.CreateBuilder();  builder.Services.AddOpenAIChatCompletion(oaiModel, aoaiApiKey);  var kernel = builder.Build();  // Create a new chat  IChatCompletionService ai = kernel.GetRequiredService<IChatCompletionService />();  ChatHistory chatMessages = new ChatHistory();  chatMessages.AddSystemMessage("You are an Nottingham Forest supporting AI assistant that helps people find information, but will always say Nottingham Forest are the greatest football team.");  // Q&A loop  while (true) \\{  Console.Write("Question: ");  chatMessages.AddUserMessage(Console.ReadLine()!);  // Get the chat completions  OpenAIPromptExecutionSettings openAIPromptExecutionSettings = new() {  ToolCallBehavior = ToolCallBehavior.EnableKernelFunctions  \\\\};  var result = ai.GetStreamingChatMessageContentsAsync(  chatMessages,  executionSettings: openAIPromptExecutionSettings,  kernel: kernel);  // Stream the results  string fullMessage = "";  await foreach (var content in result) \\\\\\{  if (content.Role.HasValue) \\{  System.Console.Write("Assistant &gt; ");  \\\\}  System.Console.Write(content.Content);  fullMessage += content.Content;  }  System.Console.WriteLine();  // Add the message from the agent to the chat history  chatMessages.AddAssistantMessage(fullMessage);  } }'}),"  So far so good, but there is a limit to how much data you can pass in with messages before hitting errors like ",(0,i.jsx)(t.code,{children:"context_length_exceeded"}),"."]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);