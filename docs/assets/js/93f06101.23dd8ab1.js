"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4495],{1228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=n(52249),o=n(74848),s=n(28453);const a={title:"Signing Git Commits in VS Code and Visual Studio",authors:["mark-burton"],tags:["VS Code","Visual Studio","Git","gpg"],description:"I have recently read a number of PenTest reports and investigated and fixed the vulnerabilities.",date:"2023-01-20"},r="Singing git commits in VS Code and Visual Studio  ## Install GnuPG  choco install gnupg or https:/gpg4win.orgget-gpg4win.html  ## Generate a new key  In PowerShell run  ``` powershell",g={authorsImageUrls:[void 0]},d=[];function l(e){const t={a:"a",code:"code",em:"em",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(t.p,{children:["gpg --full-generate-key\n",(0,o.jsx)(t.code,{children:" You will be asked 3 questions, the first is the kind of key, based on [the GitHub docs](https:/docs.github.comenauthenticationmanaging-commit-signature-verificationgenerating-a-new-gpg-key) choose option 1, RSA. "})," powershell\ngpg (GnuPG) 2.4.0; Copyright (C) 2021 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Please select what kind of key you want:  (1) RSA and RSA  (2) DSA and Elgamal  (3) DSA (sign only)  (4) RSA (sign only)  (9) ECC (sign and encrypt) ",(0,o.jsx)(t.em,{children:"default"}),"  (10) ECC (sign only)  (14) Existing key from card\nYour selection?\n",(0,o.jsx)(t.code,{children:" Again following [the GitHub docs](https:/docs.github.comenauthenticationmanaging-commit-signature-verificationgenerating-a-new-gpg-key) the key must be at least 4,096 bits long, so the maximum you can choose. "})," powershell  RSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits  ",(0,o.jsx)(t.code,{children:" Next, choose how long the key should be valid for, again following [the GitHub docs](https:/docs.github.comenauthenticationmanaging-commit-signature-verificationgenerating-a-new-gpg-key) choose the default, which is no expiration "})," powershell\nPlease specify how long the key should be valid.  0 = key does not expire  <n>  = key expires in n days  <n>w = key expires in n weeks  <n>m = key expires in n months  <n>y = key expires in n years\nKey is valid for? (0)\n",(0,o.jsx)(t.code,{children:" Finally, add your user identity, it is important that the email address matches the git repo email. "})," powershell  We need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: directory 'C:\\Users\\xxxxx\\AppData\\Roaming\\gnupg\\openpgp-revocs.d' created\ngpg: revocation certificate stored as 'C:\\Users\\xxxxxx\\AppData\\Roaming\\gnupg\\openpgp-revocs.d\\36E97B0FB71E5EEEC2244F4AFDE4A9B5B04820D7.rev'\npublic and secret key created and signed.\npub  rsa4096 2023-01-29 [SC]  36E97B0FB71E5EEEC2244F4AFDE4A9B5B04820D7\nuid  markb <",(0,o.jsx)(t.a,{href:"mailto:mark@example.com",children:"mark@example.com"}),">\nsub  rsa4096 2023-01-29 [E]\n",(0,o.jsx)(t.code,{children:" ## Final git config "})," powershell  PS C:\\Source\\GitRepos\\mywyamblog> git config --global -l\n...snip...\nuser.signingkey=N07AR33A1S1GN1NGK3Y!\ngpg.program=c",":Program"," Files (x86)GnuPGbingpg.exe\ncommit.gpgsign=true\n...snip...  ",(0,o.jsx)(t.code,{children:" ## Usage in VS Code  Continue to use VS Code normally, when you do a commit you will be prompted for the passphrase for the gpg key.  ![gpg prompt in VS Code](/img/VSCode_Sign_Commit.png)  ## How often to sign the commits?  Signing every commit can be tedious, the default cache time is 1800 seconds (30 minutes) as per the [Agent Options documentation](https:/www.gnupg.orgdocumentationmanualsgnupgAgent-Options.html).  Although this is not the same answer as running `gpgconf.exe --list-options gpg-agent` which returns 600 seconds and is backed up by a local test. "})," cmd  PS C:\\Users\\mburton.gnupg> gpgconf.exe --list-options gpg-agent\n...\ndefault-cache-ttl:24:0",":expire"," cached PINs after N seconds:3:3:N:600::\nmax-cache-ttl:24:2",":set"," maximum PIN cache lifetime to N seconds:3:3:N:7200::\nmax-cache-ttl-ssh:24:2",":set"," maximum SSH key lifetime to N seconds:3:3:N:7200::\nignore-cache-for-signing:8:0",":do"," not use the PIN cache when signing:0:0::::\n...  ```  The options to change the cache are discussed in this ",(0,o.jsx)(t.a,{href:"https:/superuser.comquestions624343keep-gnupg-credentials-cached-for-entire-user-session",children:"Super User"})," question. Extending the ",(0,o.jsx)(t.code,{children:"default-cache-ttl"})," and ",(0,o.jsx)(t.code,{children:"max-cache-ttl"})," will mean entering the signing key phrase less often.  https:/superuser.comquestions1068980where-is-my-gpgconf-file-on-windows  2 gpg installations because git comes with its own.  14400 is a compromise at 4 hours."]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},52249:e=>{e.exports=JSON.parse('{"permalink":"/docs/blog/2023/01/20/Signing-Git-Commits-in-VSCode-and-VisualStudio","editUrl":"https://github.com/MarkZither/mywyamblog/tree/main/docs/blog/2023-01-20-Signing-Git-Commits-in-VSCode-and-VisualStudio.md","source":"@site/blog/2023-01-20-Signing-Git-Commits-in-VSCode-and-VisualStudio.md","title":"Signing Git Commits in VS Code and Visual Studio","description":"I have recently read a number of PenTest reports and investigated and fixed the vulnerabilities.","date":"2023-01-20T00:00:00.000Z","tags":[{"inline":true,"label":"VS Code","permalink":"/docs/blog/tags/vs-code"},{"inline":true,"label":"Visual Studio","permalink":"/docs/blog/tags/visual-studio"},{"inline":true,"label":"Git","permalink":"/docs/blog/tags/git"},{"inline":true,"label":"gpg","permalink":"/docs/blog/tags/gpg"}],"readingTime":3.31,"hasTruncateMarker":false,"authors":[{"name":"Mark Burton","title":"Software Engineer & Technical Writer","url":"https://github.com/MarkZither","imageURL":"https://github.com/MarkZither.png","key":"mark-burton","page":null}],"frontMatter":{"title":"Signing Git Commits in VS Code and Visual Studio","authors":["mark-burton"],"tags":["VS Code","Visual Studio","Git","gpg"],"description":"I have recently read a number of PenTest reports and investigated and fixed the vulnerabilities.","date":"2023-01-20"},"unlisted":false,"prevItem":{"title":"Teenager Dog Training Session 1","permalink":"/docs/blog/2023/02/05/Teenager-Dog-Training-Session-1"},"nextItem":{"title":"Notes From Addressing Penetration Test Findings","permalink":"/docs/blog/2022/04/11/Notes-from-addressing-pentest-results"}}')}}]);