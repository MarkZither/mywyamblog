"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1471],{28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var i=o(96540);const n={},r=i.createContext(n);function s(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(r.Provider,{value:t},e.children)}},55267:e=>{e.exports=JSON.parse('{"permalink":"/docs/blog/2021/06/18/centralizing-vsto-add-in-exception-management-with-postsharp6","editUrl":"https://github.com/MarkZither/mywyamblog/tree/main/docs/blog/2021-06-18-centralizing-vsto-add-in-exception-management-with-postsharp6.md","source":"@site/blog/2021-06-18-centralizing-vsto-add-in-exception-management-with-postsharp6.md","title":"Centralizing VSTO add in exception management with postsharp 6","description":"After much reading it seems you cannot handle exceptions globally in an Office add-in","date":"2021-06-18T00:00:00.000Z","tags":[{"inline":false,"label":"PostSharp","permalink":"/docs/blog/tags/postsharp","description":".NET aspect-oriented programming framework"},{"inline":false,"label":"VSTO","permalink":"/docs/blog/tags/vsto","description":"Visual Studio Tools for Office"}],"readingTime":2.9,"hasTruncateMarker":false,"authors":[{"name":"Mark Burton","title":"Software Engineer & Technical Writer","url":"https://github.com/MarkZither","imageURL":"https://github.com/MarkZither.png","key":"mark-burton","page":null}],"frontMatter":{"title":"Centralizing VSTO add in exception management with postsharp 6","authors":["mark-burton"],"tags":["PostSharp","VSTO"],"description":"After much reading it seems you cannot handle exceptions globally in an Office add-in","date":"2021-06-18"},"unlisted":false,"prevItem":{"title":"Making pizza in my Ooni Koda 12","permalink":"/docs/blog/2021/07/09/making-pizza-in-my-ooni-koda-12"},"nextItem":{"title":"My First Skydive @ LuxFly","permalink":"/docs/blog/2021/06/11/my-first-skydive"}}')},8e4:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=o(55267),n=o(74848),r=o(28453);const s={title:"Centralizing VSTO add in exception management with postsharp 6",authors:["mark-burton"],tags:["PostSharp","VSTO"],description:"After much reading it seems you cannot handle exceptions globally in an Office add-in",date:"2021-06-18"},a=void 0,l={authorsImageUrls:[void 0]},c=[];function d(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["After much reading around trying to find the best way to implement a global exception handler for a VSTO add-in on ",(0,n.jsx)(t.a,{href:"https:/social.msdn.microsoft.comForumsvstudioen-USc37599d9-21e8-4c32-b00e-926f97c8f639global-exception-handler-for-vs-2008-excel-addin?forum=vsto",children:"social msdn"}),", ",(0,n.jsx)(t.a,{href:"https:/stackoverflow.comquestions12115030catch-c-sharp-wpf-unhandled-exception-in-word-add-in-before-microsoft-displays-e",children:"stackoverflow"})," and the ",(0,n.jsx)(t.a,{href:"https:/www.add-in-express.comforumread.php?FID=5&TID=12667",children:"Add-in Express forum"})," I came across this solution ",(0,n.jsx)(t.a,{href:"https:/exceptionalcode.wordpress.com20100217centralizing-vsto-add-in-exception-management-with-postsharp",children:"using postsharp"}),", this was the best solution I found but was 11 years old and relevant to postsharp 2, the library has changed a lot since then and the ",(0,n.jsx)(t.code,{children:"PostSharp.Laos"})," namespace no longer exists as explained the ",(0,n.jsx)(t.a,{href:"https:/support.postsharp.netrequest21870-postshaplaos-in-version-41",children:"postsharp support forum"}),".  ## The Solution in PostSharp 6\nHappily this is still possible with ",(0,n.jsx)(t.a,{href:"https:/www.postsharp.netgetcommunity",children:"PostSharp Community"})," and is well documented in the ",(0,n.jsx)(t.a,{href:"https:/doc.postsharp.netexception-handling",children:"postsharp handling exceptions documentation"}),".  First create a class which inherits from ",(0,n.jsx)(t.code,{children:"OnExceptionAspect"})," for example ",(0,n.jsx)(t.a,{href:"https:/github.comMarkZitherKimaiDotNetblobmainsrcMarkZither.KimaiDotNet.ExcelAddinVstoUnhandledExceptionAttribute.cs",children:"VstoUnhandledExceptionAttribute"}),".  ",(0,n.jsx)(t.code,{children:'csharp using Microsoft.Extensions.Logging;  using PostSharp.Aspects; using PostSharp.Serialization;  namespace MarkZither.KimaiDotNet.ExcelAddin \\\\\\{  [PSerializable]  public class VstoUnhandledExceptionAttribute : OnExceptionAspect  \\{  public override void OnException(MethodExecutionArgs args)  {  ExcelAddin.Globals.ThisAddIn.Logger.LogCritical(args.Exception, "Handled by postsharp OnExceptionAspect");  args.FlowBehavior = FlowBehavior.Return;  \\\\}  } }'}),"  This step will vary depending on how you are doing logging in your VSTO Add-In, I chose to use ",(0,n.jsx)(t.a,{href:"https:/www.nuget.orgpackagesMicrosoft.Extensions.Logging",children:"Microsoft.Extensions.Logging"}),", while it arrived with ",(0,n.jsx)(t.a,{href:"https:/en.wikipedia.orgwiki.NET_Core",children:".NET Core"})," it is a .NETStandard 2.0 library and compatible all the way back to .NETFramework 4.6.1.  ",(0,n.jsx)(t.code,{children:'csharp  private void ThisAddIn_Startup(object sender, System.EventArgs e) \\\\{  instantiate and configure logging. Using serilog here, to log to console and a text-file.  var loggerFactory = new Microsoft.Extensions.Logging.LoggerFactory();  var loggerConfig = new LoggerConfiguration()  .MinimumLevel.Debug()  .WriteTo.File("c:\\\\temp\\\\logs\\\\myapp.txt", rollingInterval: RollingInterval.Day)  .CreateLogger();  loggerFactory.AddSerilog(loggerConfig);  // create logger and put it to work.  var logProvider = loggerFactory.CreateLogger<ThisAddIn />();  logProvider.LogDebug("debiggung");  Logger = logProvider;  Configure PostSharp Logging to use Serilog  LoggingServices.DefaultBackend = new MicrosoftLoggingBackend(loggerFactory);  Globals.ThisAddIn.ApiUrl = Settings.Default?.ApiUrl;  Globals.ThisAddIn.ApiUsername = Settings.Default?.ApiUsername;  this.Application.WorkbookActivate += Application_WorkbookActivate;  this.Application.WorkbookOpen += Application_WorkbookOpen; \\}'}),"  There is one important line in the logging setup which differs to the ",(0,n.jsx)(t.a,{href:"https:/doc.postsharp.netlogging-aspnetcore",children:"PostSharp Logging documentation"})," at the time of writing, ",(0,n.jsx)(t.code,{children:"  LoggingServices.DefaultBackend = new MicrosoftLoggingBackend(loggerFactory);"})," which needs ",(0,n.jsx)(t.code,{children:"using PostSharp.Patterns.Diagnostics.Backends.Microsoft;"}),". This is also useful for trace logging which I will explain further in the next section.  Now decorate methods or entire classes with the ",(0,n.jsx)(t.code,{children:"[VstoUnhandledException]"})," attribute and every exception will be handled by the ",(0,n.jsx)(t.code,{children:"OnException"})," method.  ## Bonus functionality in PostSharp community\nAs I had logging working I also made use of the features of ",(0,n.jsx)(t.a,{href:"https://www.postsharp.net/logging",children:"PostSharp Logging"})]}),"\n",(0,n.jsxs)(t.p,{children:["First add a ",(0,n.jsx)(t.code,{children:"postsharp.config"})," file, to comply with the license it is required to set the ",(0,n.jsx)(t.a,{href:"https://doc.postsharp.net/logging-license",children:"LoggingDeveloperMode to true"}),". Be sure it has the Build Action set to Content so that it is copied to the output directory."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<Project xmlns="http://schemas.postsharp.org/1.0/configuration">\n  <Property Name="LoggingDeveloperMode" Value="True" />\n</Project>\n'})}),"\n",(0,n.jsx)(t.p,{children:"This still gives you 24 hours of trace logging after every publish of your VSTO Add-In and full tracing while debugging."}),"\n",(0,n.jsxs)(t.p,{children:["To control what is logged create a class called ",(0,n.jsx)(t.code,{children:"GlobalAspects"}),", this is explained in the ",(0,n.jsx)(t.a,{href:"https://doc.postsharp.net/add-logging",children:"Adding logging to your projects"})," section."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using PostSharp.Patterns.Diagnostics;\nusing PostSharp.Extensibility;  [assembly: Log(AttributePriority = 1, AttributeTargetMemberAttributes = MulticastAttributes.Protected | MulticastAttributes.Internal | MulticastAttributes.Public)]\n[assembly: Log(AttributePriority = 2, AttributeExclude = true, AttributeTargetMembers = "get_*")]\n```  Now the logging will contain all the entry and exits from methods along with the parameters which were passed, providing valuable debug information for free for a whole day after pushing out and update to the Add-In.\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);